@using System.Web
@using W10Home.NetCoreDevicePortal.DataAccess.Entities
@model W10Home.NetCoreDevicePortal.DataAccess.Entities.DeviceFunctionEntity

@{
    ViewBag.Title = "Edit Function";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script src="~/lib/monaco-editor/min/vs/loader.js"></script>

<script language="javascript">
    require.config({ paths: { 'vs': '/lib/monaco-editor/min/vs' } });
    require(['vs/editor/editor.main'], function() {
        $.ajax({
            type: "POST",
            dataType: "json",
            url: '@Url.Action("GetFunction", "Device")',
            data: {deviceId: '@Model.PartitionKey', functionId: '@Model.RowKey'},
            success: function(data) {
                var codeSnippet = data.script;
                window.editor = monaco.editor.create(document.getElementById('codecontainer'), {
                    value: codeSnippet,
                    language: 'lua',
                    theme: "vs-dark",
                });
            }
        });


    });

    function copyCodeToHiddenField() {
        var code = window.editor.getValue();
        $('#Script').val(code);
        $('form').submit();
    }

    function deleteFunction() {
    if (confirm('Are you sure?')) {
        $.ajax({
            type: "DELETE",
            url: '/api/devicefunction/@Model.PartitionKey/@Model.RowKey',
            cache: false,
            success: function(data) { window.location.href = '@Url.Action("Details", "Device", new {id = @Model.PartitionKey})'; },
            error: function (){ alert("error"); }
            });
        }
    }
</script>

<h2>Edit Device Function</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Device Function</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.PartitionKey)
        @Html.HiddenFor(model => model.RowKey)

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TriggerType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TriggerType, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Interval, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Interval, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.QueueName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.QueueName, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>
        
        <div class="form-group">
            @Html.LabelFor(model => model.Enabled, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Enabled, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>
        
        @Html.HiddenFor(model => model.Script)

        
    </div>
}

<div>
    All device scripts are currently written in Lua. If you like to know how to develop in Lua, check out the official documentation: <a href="https://www.lua.org/pil/contents.html" target="_blank">"Programming in Lua"</a>
</div>
<div id="codecontainer" style="height: 600px; width: 800px; margin-top: 10px;"></div>

<div class="form-group">
    <div class="col-md-offset-0 col-md-10">
        <input type="button" value="Save" class="btn btn-default" onclick="copyCodeToHiddenField();" />
        <input type="button" value="Delete" class="btn" onclick="deleteFunction();" />
        <input type="button" value="Back to device details" class="btn btn-default" onclick="window.document.location='@Url.Action("Details", new { id = Model.PartitionKey })'" />
    </div>
</div>

<environment include="Development">
    <script src="~/lib/jquery-validation/dist/jquery.validate.js"></script>
</environment>
<environment exclude="Development">
    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
</environment>


