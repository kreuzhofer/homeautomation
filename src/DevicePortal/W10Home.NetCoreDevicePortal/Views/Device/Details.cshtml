@model W10Home.DevicePortal.IotHub.DeviceData

@{
    ViewBag.Title = "Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script type="text/javascript" src="~/lib/signalr-client/signalr-client-1.0.0-alpha2-final.min.js"></script>
<script type="text/javascript" src="~/lib/signalr-client/signalr-msgpackprotocol-1.0.0-alpha2-final.min.js"></script>
<script type="text/javascript" src="~/lib/jquery-color/jquery.color.js"></script>

<script type="text/javascript">
    //if (typeof Promise === 'undefined')
    //{
    //    document.write(
    //        '<script type="text/javascript" src="lib/signalr-client/signalr-clientES5.js"><\/script>' +
    //        '<script type="text/javascript" src="lib/signalr-client/signalr-msgpackprotocolES5.js"><\/script>');
    //}
    //else
    //{
    //    document.write(
    //        '<script type="text/javascript" src="lib/signalr-client/signalr-client.js"><\/script>' +
    //        '<script type="text/javascript" src="lib/signalr-client/signalr-msgpackprotocol.js"><\/script>');
    //}

    let logger = new signalR.ConsoleLogger(signalR.LogLevel.Information);
    logConnection = new signalR.HubConnection('/log', { logger: logger });
    channelConnection = new signalR.HubConnection('/devicestate', { logger: logger });

    function startStreamingLogs() {
        logConnection.stream("Logs", "@Model.Id").subscribe({
            next: function(item) {
                var myTextArea = $('#log');
                myTextArea.val(myTextArea.val() + '\n' + item.message);
                // https://stackoverflow.com/questions/7373081/how-to-have-a-textarea-to-keep-scrolled-to-the-bottom-when-updated
                $('#log').scrollTop($('#log')[0].scrollHeight);
            },
            error: function (err) {
                logger.log(err);
            }
        });
    }

    function startStreamingChannel() {
        channelConnection.stream("State", "@Model.Id").subscribe({
            next: function(item) {
                var myTextArea = $('#' +item.channelKey);
                myTextArea.html(item.channelValue);
                myTextArea.stop().css("background-color", "green")
                    .animate({ backgroundColor: "#FFFFFF"}, 500);
            },
            error: function (err) {
                logger.log(err);
            }
        });
    }

    logConnection.start().then(function () {
        startStreamingLogs();
    });
    channelConnection.start().then(function() {
        startStreamingChannel();
    });


</script>

<h2>Details - @Model.Id</h2>

<div>
    <h4>Device Data</h4>
    <hr />
    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(model => model.ConnectionState)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.ConnectionState)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.LastActivityTime)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.LastActivityTime)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.LastConnectionStateUpdatedTime)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.LastConnectionStateUpdatedTime)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.LastStateUpdatedTime)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.LastStateUpdatedTime)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.MessageCount)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.MessageCount)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.State)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.State)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.SuspensionReason)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.SuspensionReason)
        </dd>
        
    </dl>
</div>
<p>
    @Html.ActionLink("Edit", "Edit", new { id = Model.Id }) |
    @Html.ActionLink("Back to List", "Index")
</p>


<div>
    <h4>Device Plugins</h4>
    <hr />
    <table class="table">
        <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Enabled</th>
        </tr>

        @foreach (var item in Model.DevicePlugins)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Type)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Enabled)
                </td>
            </tr>
        }
    </table>
</div>

<div>
    <h4>Device Channel State</h4>
    <hr />
    <table class="table">
        <tr>
            <th>Channel</th>
            <th>ChannelType</th>
            <th>Value</th>
        </tr>
        
        @foreach (var item in Model.StateList)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem=>item.ChannelKey)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ChannelType)
                </td>
                <td id="@item.ChannelKey">
                    @Html.DisplayFor(modelItem => item.ChannelValue)
                </td>
            </tr>
        }
    </table>
</div>

<div>
    <h4>Device Functions</h4>
    <hr />
    <table class="table">
        <tr>
            <th>Name</th>
            <th>TriggerType</th>
            <th>Interval</th>
            <th>QueueName</th>
            <th>Enabled</th>
            <th></th>
        </tr>

        @foreach (var item in Model.DeviceFunctions)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.RowKey)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.TriggerType)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Interval)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.QueueName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Enabled)
                </td>
                <td>
                    @Html.ActionLink("Edit", "EditFunction", new { deviceId = item.PartitionKey, functionName = item.RowKey })
                </td>
            </tr>
        }
        <tr>
            <td>@Html.ActionLink("+", "Add")</td>
        </tr>
    </table>
</div>

<div style="width: 100%; padding-top: 20px;">
    <h4>Logs</h4>
    <hr/>
    <textarea readonly="readonly" class="form-control" id="log" style="min-width: 100%; min-height: 250px; font-family: monospace; font-size: small;"></textarea>
</div>
