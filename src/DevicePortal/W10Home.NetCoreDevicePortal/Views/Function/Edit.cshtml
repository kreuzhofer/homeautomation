@using System.Web
@using IoTHs.Api.Shared
@using W10Home.NetCoreDevicePortal.DataAccess.Entities
@model W10Home.NetCoreDevicePortal.DataAccess.Entities.DeviceFunctionEntity

@{
    ViewBag.Title = "Edit Function";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script type="text/javascript" src="~/lib/signalr-client/signalr-client-1.0.0-alpha2-final.min.js"></script>
<script type="text/javascript" src="~/lib/signalr-client/signalr-msgpackprotocol-1.0.0-alpha2-final.min.js"></script>
<script src="~/lib/monaco-editor/min/vs/loader.js"></script>

<script language="javascript">
    require.config({ paths: { 'vs': '/lib/monaco-editor/min/vs' } });
    require(['vs/editor/editor.main'],
        function() {
            var partitionKey = '@Model.RowKey';
            if (partitionKey == '') {
                var codeSnippet = '@Model.Script';
                startEditor(codeSnippet);
            } else {
                $.ajax({
                    type: "POST",
                    dataType: "json",
                    url: '@Url.Action("GetFunction", "Device")',
                    data: { deviceId: '@Model.PartitionKey', functionId: '@Model.RowKey' },
                    success: function(data) {
                        var codeSnippet = data.script;
                        startEditor(codeSnippet);
                    }
                });
            }
        });

    function startEditor(codeSnippet) {
        window.editor = monaco.editor.create(document.getElementById('codecontainer'), {
            value: codeSnippet,
            language: 'lua',
            theme: "vs-dark",
        });
    }

    logger = new signalR.ConsoleLogger(signalR.LogLevel.Information);
    logConnection = new signalR.HubConnection('/log', { logger: logger });
    channelConnection = new signalR.HubConnection('/devicestate', { logger: logger });

    function startStreamingLogs() {
        logConnection.stream("Logs", "@Model.PartitionKey").subscribe({
            next: function (item) {
                var source = item.source;
                if (source && source.endsWith("@Model.RowKey"))
                {
                    var myTextArea = $('#log');
                    myTextArea.val(myTextArea.val() + '\n' + item.message);
                    // https://stackoverflow.com/questions/7373081/how-to-have-a-textarea-to-keep-scrolled-to-the-bottom-when-updated
                    $('#log').scrollTop($('#log')[0].scrollHeight);
                }
            },
            error: function (err) {
                logger.log(err);
            }
        });
    }

    logConnection.start().then(function () {
        startStreamingLogs();
    });

    function copyCodeToHiddenField() {
        var code = window.editor.getValue();
        $('#Script').val(code);
        $('form').submit();
    }

    function deleteFunction() {
    if (confirm('Are you sure?')) {
        $.ajax({
            type: "DELETE",
            url: '/api/devicefunction/@Model.PartitionKey/@Model.RowKey',
            cache: false,
            success: function(data) { window.location.href = '@Url.Action("Details", "Device", new {id = @Model.PartitionKey})'; },
            error: function (){ alert("error"); }
            });
        }
    }
</script>

<h2>Edit Device Function</h2>

@using (Html.BeginForm("Edit", "Function"))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Device Function</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.PartitionKey)
        @Html.HiddenFor(model => model.RowKey)

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TriggerType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.TriggerType, new[]
                               {
                new SelectListItem()
                {
                    Text = FunctionTriggerType.MessageQueue.ToString(),
                    Value = FunctionTriggerType.MessageQueue.ToString()
                }, new SelectListItem
                {
                    Text = FunctionTriggerType.RecurringIntervalTimer.ToString(),
                    Value = FunctionTriggerType.RecurringIntervalTimer.ToString()
                }, new SelectListItem
                {
                    Text = FunctionTriggerType.CronSchedule.ToString(),
                    Value = FunctionTriggerType.CronSchedule.ToString()
                }
            }, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Interval, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Interval, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.CronSchedule, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CronSchedule, new { htmlAttributes = new { @class = "form-control" } })
                <textarea style="font-family: monospace; min-width: 500px;" rows="17" readonly="readonly">
* * * * *
┬ ┬ ┬ ┬ ┬
│ │ │ │ │
│ │ │ │ │
│ │ │ │ └───── day of week (0 - 6) (Sunday=0 )
│ │ │ └────────── month (1 - 12)
│ │ └─────────────── day of month (1 - 31)
│ └──────────────────── hour (0 - 23)
└───────────────────────── min (0 - 59)

`* * * * *` Every minute.
`0 * * * *` Top of every hour.
`0,1,2 * * * *` Every hour at minutes 0, 1, and 2.
`*/2 * * * *` Every two minutes.
`1-55 * * * *` Every minute through the 55th minute.
`* 1,10,20 * * *` Every 1st, 10th, and 20th hours.
            </textarea>
            </div>

        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.QueueName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.QueueName, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Enabled, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Enabled, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>

        @Html.HiddenFor(model => model.Script)
        @Html.HiddenFor(model => model.Language)


    </div>
}

<div>
    All device scripts are currently written in Lua. If you like to know how to develop in Lua, check out the official documentation: <a href="https://www.lua.org/pil/contents.html" target="_blank">"Programming in Lua"</a>
</div>
<div id="codecontainer" style="height: 600px; width: 800px; margin-top: 10px;"></div>

<div style="width: 100%; padding-top: 20px;">
    <h4>Logs</h4>
    <hr />
    <textarea readonly="readonly" class="form-control" id="log" style="min-width: 100%; min-height: 250px; font-family: monospace; font-size: small;"></textarea>
</div>

<div class="form-group" style="margin-top: 20px;">
    <div class="col-md-offset-0 col-md-10">
        <input type="button" value="Save" class="btn btn-default" onclick="copyCodeToHiddenField();" />
        <input type="button" value="Delete" class="btn" onclick="deleteFunction();" />
        <input type="button" value="Back to device details" class="btn" onclick="window.document.location='@Url.Action("Details", "Device", new { id = Model.PartitionKey })'" />
    </div>
</div>

<environment include="Development">
    <script src="~/lib/jquery-validation/dist/jquery.validate.js"></script>
</environment>
<environment exclude="Development">
    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
</environment>


